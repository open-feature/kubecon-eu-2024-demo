---
# yaml-language-server: $schema=https://flagd.dev/schema/v0/flags.json

## target noting, using default flag
emptyTargeting: &emptyTargeting {}

## target emoji based on browser language              
languageTargeting: &languageTargeting
  if:
  - in:
    - fr
    - var: language
  - fr
  - if:
    - in:
      - en
      - var: language
    - en
    - if:
      - in:
        - es      
        - var: language
      - es
      - if:
        - in:
          - pt
          - var: language
        - pt
        - if:
          - in:
            - de
            - var: language
          - de
          - if:
            - in:
              - it
              - var: language
            - it
            - if:
              - in:
                - nl
                - var: language
              - nl
              - globe

## target emoji based on timestamp              
timedTargeting: &timedTargeting
  if: 
    - ">=":
      - var: $flagd.timestamp
      - 1710343959
    - boom
    - clock

## target color based on screen res: higher res is "bluer"
pixelTargeting: &pixelTargeting
  if:
    - ">=":
      - "*":
        - var: windowHeight
        - var: windowWidth
      - 4000000
    - indigo
    - if:
      - ">=":
        - "*":
          - var: windowHeight
          - var: windowWidth
        - 3200000
      - blue
      - if:
        - ">=":
          - "*":
            - var: windowHeight
            - var: windowWidth
          - 2400000
        - green
        - if:
          - ">=":
            - "*":
              - var: windowHeight
              - var: windowWidth
            - 1800000
          - yellow
          - if:
            - ">=":
              - "*":
                - var: windowHeight
                - var: windowWidth
              - 0
            - orange

## target color randomly deciding the giveaway!
giveawayTargeting: &giveawayTargeting
  fractional:
    - 
      - red
      - 75
    - 
      - green
      - 25

## target color based on device battery (low=red, medium=yellow, high=green, null=grey)
batteryTargeting: &batteryTargeting
  if:
  - ">=":
    - var: batteryPercentage
    - 50
  - green
  - if:
    - ">=":
      - var: batteryPercentage
      - 25
    - yellow
    - if:
      - ">":
        - var: batteryPercentage
        - 0
      - red
      - grey

## target emoji based on OS
osTargeting: &osTargeting
  if:
    - in:
      - Android
      - var: userAgent
    - bot
    - if:
      - in:
        - Mac
        - var: userAgent
      - apple
      - if:
        - in:
          - Win      
          - var: userAgent
        - window
        - if:
          - in:
            - Linux
            - var: userAgent
          - penguin
          - if:
            - in:
              - iPhone
              - var: userAgent
            - apple
            - mind-blown

## target emoji based on connection quality
connectionTargeting: &connectionTargeting
  if:
  - "==":
    - var: connectionType
    - 4g
  - rocket
  - if:
    - "==":
      - var: connectionType
      - 3g
    - rabbit
    - if:
      - "==":
        - var: connectionType
        - 2g
      - turtle
      - if:
        - "==":
          - var: connectionType
          - slow-2g
        - snail
        - none

## emoji randomly assigned to a card suit
randomTargeting: &randomTargeting
  fractional:
    - 
      - clubs
      - 25
    - 
      - spades
      - 25
    - 
      - diamonds
      - 25
    - 
      - hearts
      - 25

# Flags for our backend application
apiVersion: core.openfeature.dev/v1beta1
kind: FeatureFlag
metadata:
  name: app-flags
  labels:
    app: open-feature-demo
spec:
  flagSpec:
    flags:
      hex-color:
        state: ENABLED
        defaultVariant: grey
        variants:
          grey: aaa
          red: a00
          orange: ff6e00
          yellow: aa0
          green: 0a0
          blue: 00a
          indigo: 4b0082
        targeting: *emptyTargeting
        #targeting: *pixelTargeting
        #targeting: *batteryTargeting
        #targeting: *giveawayTargeting

      emoji:
        state: ENABLED
        defaultVariant: none
        variants:
          none: ""
          grin: 😀
          joy: 😂
          xd: 😆
          shades: 😎
          angel: 😇
          devil: 😈
          cry: 😭
          flush: 😳
          mind-blown: 🤯
          hot-face: 🥵
          cat: 😸
          ded: 💀
          stonks: 📈
          not-stonks: 📉
          battery: 🔋
          bot: 🤖
          apple: 🍎
          fox: 🦊
          penguin: 🐧
          window: 🪟
          snail: 🐌
          turtle: 🐢
          rabbit: 🐇
          rocket: 🚀
          spades: "♠️"
          clubs: "♣️"
          diamonds: "♦️"
          hearts: "♥️"
          fr: 🇫🇷
          en: 🇬🇧
          es: 🇪🇸
          pt: 🇵🇹
          de: 🇩🇪
          it: 🇮🇹
          nl: 🇳🇱
          globe: 🌎
          clock: ⏰
          boom: 💥
        targeting: *emptyTargeting 
        #targeting: *languageTargeting
        #targeting: *osTargeting
        #targeting: *randomTargeting
        #targeting: *timedTargeting
        #targeting: *connectionTargeting

---
# Feature flag source custom resource, configuring flagd to source flags from FeatureFlag CRDs
apiVersion: core.openfeature.dev/v1beta1
kind: FeatureFlagSource
metadata:
  name: flag-sources
  labels:
    app: open-feature-demo
spec:
  sources:
    - source: app-flags
      provider: kubernetes

---
# Deployment of a demo-app using our custom resources
apiVersion: apps/v1
kind: Deployment
metadata:
  name: open-feature-demo-deployment
  labels:
    app: open-feature-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: open-feature-demo
  template:
    metadata:
      labels:
        app: open-feature-demo
      annotations:
        openfeature.dev/enabled: "true"
        openfeature.dev/featureflagsource: "flag-sources"
    spec:
      containers:
        - name: open-feature-demo
          image: docker.io/toddbaert/openfeature-kubecon24
          ports:
            - containerPort: 3000

---
apiVersion: v1
kind: Service
metadata:
  name: neg-demo-svc # Name of Service
  annotations:
    cloud.google.com/neg: '{"ingress": true}' # Creates a NEG after an Ingress is created
spec: # Service's specification
  type: ClusterIP
  selector:
    app: open-feature-demo
  ports:
    - name: http
      port: 80 # Service's port
      protocol: TCP
      targetPort: 3000
